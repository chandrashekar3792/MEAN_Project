
The res object represents the HTTP response that an Express app sends when it gets an HTTP request.

=> res.headersSent
Boolean property that indicates if the app sent HTTP headers for the response.

Usage:
  app.get('/', function (req, res) {
    console.log(res.headersSent); // false
    res.send('OK');
    console.log(res.headersSent); // true
  });

=> res.append(field [, value])
Appends the specified value to the HTTP response header field. If the header is not already set, it creates the header with the specified value. The value parameter can be a string or an array.

Usage:
  res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
  res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
  res.append('Warning', '199 Miscellaneous warning');

=>res.attachment([filename])
Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given, then it sets the Content-Type based on the extension name via res.type(), and sets the Content-Disposition “filename=” parameter.

Usage:
  res.attachment();
  // Content-Disposition: attachment

  res.attachment('path/to/logo.png');
  // Content-Disposition: attachment; filename="logo.png"
  // Content-Type: image/png

=> res.redirect([status,] path)
Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an HTTP status code . If not specified, status defaults to “302 “Found”.

Usage:
  res.redirect('/foo/bar');
  res.redirect('http://example.com');
  res.redirect(301, 'http://example.com');
  res.redirect('../login')

=> res.render(view [, locals] [, callback])
  Renders a view and sends the rendered HTML string to the client. Optional parameters:
  locals, an object whose properties define local variables for the view.
  callback, a callback function. If provided, the method returns both the possible error and rendered string, but does not perform an automated response. When an error occurs, the method invokes next(err) internally.
  Usage:
    res.render('index');

=> res.end([data] [, encoding])
  Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse.

  Usage:
    res.end();
    res.status(404).end();

=> res.get(field)
    Returns the HTTP response header specified by field. The match is case-insensitive.

    Usage:
    res.get('Content-Type');
    // => "text/plain"

=>res.json([body])
    Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using JSON.stringify().
    Usage:
      res.json(null);
      res.json({ user: 'tobi' });
      res.status(500).json({ error: 'message' });
